// pages/mine/addMemberCard/addMemberCard.js
import config from '../../../config.js';
var app = getApp();
var util = require('../../../utils/util.js');
import ToastPannel from '../../../common/toastTest/toastTest.js';
var WxNotificationCenter = require("../../../utils/WxNotificationCenter.js");

var vipList = []; //会员卡列表
var userVipList = []; //已办会员卡列表

var checkIndex = 0;

var fromMine = false //个人中心点击进来的

var vip_count = 1; //要办的会员卡数量

var jump = 1; //来源  1：个人中心，2商品详情

var from_type = -1000
var from_type_name = -1000

var kaiKaVipType;

var loginCount;

var loginClick = 0;

var checkCardHave = false//当前选中的会员卡是否已经办理

// var extract = 0;//用户点用来抵扣点可提现额度


var bouns = 0.00;//用户点用来抵扣将奖励金

var buchajiaPrice = 0; //可用来补差价办更好级别会员卡金额
var choosePayPrice = 0; //用户选中会员卡后底部显示点支付价格


var overVipIndex;//欠费的卡的序号


//from_type:
//   - 1抽奖次数不足且有失效的会员卡
//   -2会员卡抽奖次数但无失效会员卡，以及会员卡等级不够
//   - 3用户所有的会员卡全部作废


Page({

  /**
   * 页面的初始数据
   */
  data: {
    swiperH: '', //swiper高度
    nowIdx: 0, //当前swiper索引
    vipPrice: '0.00',
    freeCount: "0",
    current: 0,
    vip_count: 1,
    Upyun: config.Upyun,
    img_jian: "vip_couot_jian_end_new",
    patBTname: '开通并支付',
    showInviteFriends: true,

    upyconfig: config.Upyun,

  },

  //获取swiper高度
  getHeight: function (e) {
    var winWid = wx.getSystemInfoSync().windowWidth - 2 * 50; //获取当前屏幕的宽度
    var imgh = e.detail.height; //图片高度
    var imgw = e.detail.width; //图片宽度
    var sH = winWid * imgh / imgw - 20 + "px"

    var swhpx = winWid * imgh / imgw - 20;


    this.setData({
      jiatoutop: (swhpx + 40) / 2 -13 ,
      swiperH: sH //设置高度
    })
  },
  //swiper滑动事件
  swiperChange: function (e) {
    this.setData({
      nowIdx: e.detail.current
    })
    vip_count = 1
    checkIndex = e.detail.current



    choosePayPrice = vipList[checkIndex].vip_num ?
      (vipList[checkIndex].arrears_price > 0 ? vipList[checkIndex].arrears_price.toFixed(2) : vipList[checkIndex].vip_price.toFixed(2)) : vipList[checkIndex].vip_price.toFixed(2);

    //计算补差价卡和提现抵扣  （先卡后提现）
    if (0 < buchajiaPrice && buchajiaPrice < vipList[checkIndex].vip_price) {
      choosePayPrice = (vipList[checkIndex].vip_price - buchajiaPrice).toFixed(2)
    }

    if (choosePayPrice > 0 && bouns > 0) {
      choosePayPrice = (choosePayPrice - bouns).toFixed(2)
    }

    if (choosePayPrice <= 0) {
      choosePayPrice = 0.00
    }

    if (vipList[checkIndex].vip_code) {
      checkCardHave = true
    } else {
      checkCardHave = false

    }




    this.setData({

      checkCardHave: checkCardHave,

      vipPrice:


        vipList[checkIndex].arrears_price > 0 ? vipList[checkIndex].arrears_price.toFixed(2) : vipList[checkIndex].vip_price.toFixed(2)

      ,

      o_price: vipList[checkIndex].original_vip_price * vip_count + "元",


      //  vipList[checkIndex].vip_num ? vipList[checkIndex].vip_balance : 



      //  vipList[checkIndex].vip_price,






      payPrice: choosePayPrice,

      // patBTname: vipList[checkIndex].arrears_price > 0 ? '补足会员费' : '预存并开通',

      // payName: vipList[checkIndex].arrears_price > 0 ? "补足会员卡费" : "预存",


      payName: "预存",

      patBTname: from_type_name == -1 ? '开通新卡免费领美衣' : '预存并开通',

      cashabletime: vipList[checkIndex].cashabletime,

      freeCount: vipList[checkIndex].free_count,
      shopPrice: vipList[checkIndex].vip_price,

      vip_count: vip_count,

      // showPay: fromMine ? (
      //   vipList[checkIndex].vip_num ? false : true
      // ) : true,

      showPay: true,

      showCount: vipList[checkIndex].arrears_price == 0 || !vipList[checkIndex].arrears_price,

    })


  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function (options) {
    fromMine = options.memberComefrom == "mine";

    if (options.memberComefrom == "mine") {
      jump = 1;
    } else {
      jump = 2;

    }

    new app.ToastPannel();
    from_type = options.vip_type
    if (options.memberComefrom == 'order'){
      from_type = -1005;
    }


    from_type_name = from_type
    if (from_type == -1) {
      //会员用户免费次数领完后有失效的会员卡
      // 提示：尊敬的衣蝠会员，您的会员卡费已被用于购买商品，补足会员卡费后即可继续免费领。
      // 跳失效会员卡

      // this.showToast("尊敬的衣蝠会员，您的会员卡费已被用于购买商品，补足会员卡费后即可继续免费领。", 5000);
      this.showToast("因会员卡费不足会员资格已失效，现在开通新卡立即赠送一件399元的美衣哦。", 5000);


    } else if (from_type == -2) {
      // 会员用户免费次数领完后没有失效的会员卡，以及用户有免费领次数，但是点的是有效会员卡以外的商品
      // 提示：尊敬的衣蝠会员，您的会员免费领权益不足，升级会员卡后即可继续免费领。
      // 跳899至尊卡

      this.showToast("尊敬的衣蝠会员，您今日的会员卡免费领次数已使用完，购买新的会员卡后即可继续免费领", 5000);

    } else if (from_type == -3) {
      // 会员用户因为抵扣所有的会员卡全部作废后
      // 提示：尊敬的衣蝠会员，您的会员卡费已被全额用于购买商品，请重新购买会员卡。
      // 跳59.9金卡
      this.showToast("尊敬的衣蝠会员，您的会员卡费已被全额用于购买商品，请重新购买会员卡。", 5000);

    } else if (from_type == -4) {
      // 尊敬的衣蝠会员，您当前的会员卡只能免费领" + 10000+"元以下商品，请购买高等级的会员卡免费领更多商品。

    }



    this.initVipData(-1)


  },

  initVipData: function (kaiKa_vipType) {
    bouns = 0.00;
    var that = this;
    checkIndex = 0
    vipList = []
    userVipList = []
    vip_count = 1
    var requestUrl
    if (app.globalData.user){
       requestUrl = config.Host + 'userVipType/queryByVipList?token=' + app.globalData.user.userToken + '&jump=' + jump + config.Version;
    }else{
      requestUrl = config.Host + 'userVipType/queryByVipList?jump=' + jump + config.Version;

    }
    wx.showLoading({
      title: '请稍后',
      mask: true,
    })
    util.http(requestUrl, function (data) {

      if (data.status == 1) {

        if (app.globalData.user) {
          if (data.bouns){
            bouns = data.bouns.toFixed(2);  
          }
        }

        vipList = data.viplist; //会员列表
        if (data.userVipList) {
          userVipList = data.userVipList; //已开会员列表
        }

        if (from_type == -4) { //-4的提示需要取最高会员卡的金额并提示

          var maxPrice_section = userVipList[0].price_section;

          for (var i = 0; i < userVipList.length; i++) {
            if (userVipList[i].price_section > maxPrice_section) {
              maxPrice_section = userVipList[i].price_section
            }
          }
          that.showToast("尊敬的衣蝠会员，您当前的会员卡只能免费领" + maxPrice_section + "元以下商品，请购买高等级的会员卡免费领更多商品。", 5000);
          // from_type = -1000
        }

        //整合列表
        for (var vipIndex in vipList) {


          for (var userVipIndex in userVipList) {

            //找到可用来补差价办更好级别会员卡金额
            if (userVipList[userVipIndex].isUse == 1) {
              buchajiaPrice = userVipList[userVipIndex].vip_price;
            }


            if (vipList[vipIndex].vip_type == userVipList[userVipIndex].vip_type) {


              //添加vipList中不存在的数据
              vipList[vipIndex].arrears_price = userVipList[userVipIndex].arrears_price;
              vipList[vipIndex].vip_balance = userVipList[userVipIndex].vip_balance;
              vipList[vipIndex].vip_num = userVipList[userVipIndex].vip_num;
              vipList[vipIndex].vip_code = userVipList[userVipIndex].vip_code;
              vipList[vipIndex].num = userVipList[userVipIndex].num;
              vipList[vipIndex].count = userVipList[userVipIndex].count;
              vipList[vipIndex].user_vip_price = userVipList[userVipIndex].vip_price;


              vipList[vipIndex].arrears_price = vipList[vipIndex].arrears_price ? vipList[vipIndex].arrears_price : 0;



              if (vipList[vipIndex].info_url){
                vipList[vipIndex].info_url = vipList[vipIndex].info_url + '?' + Math.random()
              }

              //添加userVipList中不存在的数据
              // userVipList[userVipIndex].url = vipList[vipIndex].url
              // userVipList[userVipIndex].vip_name = vipList[vipIndex].vip_name
              // userVipList[userVipIndex].free_count = vipList[vipIndex].free_count
              // userVipList[userVipIndex].head_url = vipList[vipIndex].head_url
              // userVipList[userVipIndex].vip_price = vipList[vipIndex].vip_price
              // userVipList[userVipIndex].info_url = vipList[vipIndex].info_url
              // userVipList[userVipIndex].cashabletime = vipList[vipIndex].cashabletime
              // userVipList[userVipIndex].free_count = vipList[vipIndex].free_count
              // userVipList[userVipIndex].free_num = vipList[vipIndex].free_num



              //处理days
              // userVipList[userVipIndex].days =
              //   userVipList[userVipIndex].context ? userVipList[userVipIndex].context + '' : ""

              vipList[vipIndex].days = userVipList[userVipIndex].context ? userVipList[userVipIndex].context + '' : ""



              //处理substance
              // userVipList[userVipIndex].substance =
              //   userVipList[userVipIndex].substance ? userVipList[userVipIndex].substance + '' : ""

              vipList[vipIndex].substance = userVipList[userVipIndex].substance ? userVipList[userVipIndex].substance + '' : ""



              var isOverVip = false //是否欠费--需要补卡
              if (vipList[vipIndex].arrears_price > 0) {
                isOverVip = true
                overVipIndex = vipIndex;
                vipList[vipIndex].isOver = true 
              }

              //处理cardName
              if (isOverVip) {


                // userVipList[userVipIndex].cardName =
                //   (userVipList[userVipIndex].vip_num - 1 <= 0) ? userVipList[userVipIndex].vip_name :
                //     "已有" + userVipList[userVipIndex].vip_name + "X" + (userVipList[userVipIndex].vip_num - 1)

                vipList[vipIndex].cardName =
                  (userVipList[userVipIndex].vip_num - 1 <= 0) ? vipList[vipIndex].vip_name :
                    "已有" + vipList[vipIndex].vip_name + "X" + (userVipList[userVipIndex].vip_num - 1)



              } else {
                // userVipList[userVipIndex].cardName =
                //   userVipList[userVipIndex].vip_num > 0 ? "已有" + userVipList[userVipIndex].vip_name + "X" + userVipList[userVipIndex].vip_num : userVipList[userVipIndex].vip_name + ""

                vipList[vipIndex].cardName =
                  userVipList[userVipIndex].vip_num > 0 ? "已有" + vipList[vipIndex].vip_name + "X" + userVipList[userVipIndex].vip_num : vipList[vipIndex].vip_name + ""
              }










              //处理总金额userVipMoney
              // userVipList[userVipIndex].userVipMoney = vipList[vipIndex].vip_balance ? 
              //   '卡费￥' + vipList[vipIndex].vip_balance.toFixed(2) : ""


              vipList[vipIndex].userVipMoney = vipList[vipIndex].vip_balance ?
                '卡费￥' + vipList[vipIndex].vip_balance.toFixed(2) : ""

              // userVipList[userVipIndex].userVipMoney =
              //   userVipList[userVipIndex].vip_num > 0 ? '卡费￥' + userVipList[userVipIndex].vip_num * userVipList[userVipIndex].vip_price : ""


            }




          }
          //没有办的会员卡cardName要取vip_name
          if (!vipList[vipIndex].cardName) {
            vipList[vipIndex].cardName = vipList[vipIndex].vip_name
          }

        }

        //排序，将已开通的会员的最高级别的放在前面
        //vipList中已经去掉已开卡的会员
        // for (var i = 0; i < vipList.length; i++) {
        //   if (vipList[i].vip_code) {
        //     vipList.splice(i, 1);
        //     i--;
        //   }
        // }
        //合并vipList和userVipList
        // vipList = userVipList.concat(vipList)
        var size = vipList.length

        var currentIndex = 0;



        //开卡的默认切到金卡(没有办过卡的)
        if (from_type == -1002) {
          for (var i = 0; i < vipList.length; i++) {
            if (vipList[i].vip_type == 2) {
              currentIndex = i
            }
          }
        }

        if (jump == 1 && from_type == -1003) { //个人中心点进来的切到已办的最高会员
          var maxIdex = 0;
          for (var i = 0; i < vipList.length; i++) {
            if (vipList[i].vip_code) {
              if (vipList[i].vip_type > maxIdex) {
                // maxIdex = vipList[i].vip_type
                maxIdex = i;
              }
            }
          }
          currentIndex = maxIdex
        }


        if (from_type == -3) { //-3跳59.9（钻石）
          //找到钻石卡的index
          for (var i = 0; i < vipList.length; i++) {
            if (vipList[i].vip_type == 4) {
              currentIndex = i
            }
          }
        }



        if (from_type == -2 || from_type == -1001 || from_type == -4) {//切换到至尊会员(成为至尊会员的按钮点进来也要切到至尊会员)
          //找到至尊卡的index
          for (var i = 0; i < vipList.length; i++) {
            if (vipList[i].vip_type == 6) {
              currentIndex = i
            }
          }
        }

        if (from_type == -1005 || from_type == -1) {//切换到皇冠会员(订单列表申请发货-皇冠会员)，欠费提示也切换到皇冠卡
          //找到至尊卡的index
          for (var i = 0; i < vipList.length; i++) {
            if (vipList[i].vip_type == 5 ) {
              currentIndex = i
            }
          }
        }

        // //from_type == -1 欠费的卡提示，切换到皇冠卡
        // if (from_type == -1) {
        //   currentIndex = overVipIndex
        // }


        //kaiKa_vipType 切换到刚开的卡
        //找刚开的卡的index
        if (kaiKa_vipType != -1) {
          for (var i = 0; i < vipList.length; i++) {
            if (vipList[i].vip_type == kaiKaVipType) {
              currentIndex = i
            }
          }
        }

        checkIndex = currentIndex




        choosePayPrice = vipList[currentIndex].vip_num ?
          (vipList[currentIndex].arrears_price > 0 ? vipList[currentIndex].arrears_price.toFixed(2) : vipList[currentIndex].vip_price.toFixed(2)) : vipList[currentIndex].vip_price.toFixed(2);

        //计算补差价卡和提现抵扣  （先卡后提现）
        if (0 < buchajiaPrice && buchajiaPrice < vipList[currentIndex].vip_price){
          choosePayPrice = (vipList[currentIndex].vip_price - buchajiaPrice).toFixed(2)
        }

        if (choosePayPrice > 0 && bouns >0){
          choosePayPrice = (choosePayPrice - bouns).toFixed(2)
        }

        if (choosePayPrice <=0 ){
          choosePayPrice = "0.00"
        }
      
        if (vipList[currentIndex].vip_code){
         checkCardHave = true 
        }else{
         checkCardHave = false 
        }


        that.setData({
          nowIdx: currentIndex,
          vipList: vipList,
          current: currentIndex,
          o_price: vipList[currentIndex].original_vip_price * vip_count + "元",

          bouns: bouns,
          checkCardHave: checkCardHave,

          vipPrice:
            // vipList[0].vip_num ? vipList[0].vip_balance : vipList[0].vip_price,

            vipList[currentIndex].arrears_price > 0 ? vipList[currentIndex].arrears_price.toFixed(2) : vipList[currentIndex].vip_price.toFixed(2),


          payPrice: choosePayPrice,



          // payName: vipList[currentIndex].arrears_price > 0 ? "补足会员卡费" : "预存",

          // patBTname: vipList[currentIndex].arrears_price > 0 ? '补足会员费' : '预存并开通',

          payName: "预存",

          patBTname: from_type_name == -1 ? '开通新卡免费领美衣' : '预存并开通',

          cashabletime: vipList[currentIndex].cashabletime,

          freeCount: vipList[currentIndex].free_count,
          shopPrice: vipList[currentIndex].vip_price,
          // showPay: fromMine ? (
          //   vipList[currentIndex].vip_num ? false : true
          // ) : true,
          showPay: true,

          // showCount: !vipList[currentIndex].vip_num
          showCount: vipList[currentIndex].arrears_price == 0 || !vipList[currentIndex].arrears_price ,

        })


        from_type = -1000
      } else {





        that.showToast("" + data.message, 2000);


      }
      wx.hideLoading()

    })
  },



  // 提交订单
  submitOrder: function (e) {
    if (!app.globalData.user) {
      return
    }
    util.httpPushFormId(e.detail.formId);
    wx.showLoading({
      title: "请稍后",
      mask: true
    })
    kaiKaVipType = vipList[checkIndex].vip_type

    var dataUrl = config.Host + "userVipCard/addUserVipCard?" + config.Version + "&token=" + app.globalData.user.userToken +
      '&vip_type=' + vipList[checkIndex].vip_type + "&vip_count=" + vip_count

    util.http(dataUrl, this.confirmorderResult);
    this.setData({
      dataurl: dataUrl
    });

  },
  // 提交订单结果
  confirmorderResult: function (data) {
    var that = this;
    if (data.status == 1) {


      if (data.actual_price <= 0) { //无需支付
        wx.hideLoading()
        //发送购买会员成功的通知
        WxNotificationCenter.postNotificationName("memberNotificationItem1Name", "becomeMemberfinish");
        if (vipList[checkIndex].arrears_price && vipList[checkIndex].arrears_price > 0) {
          that.showToast("已补齐会员卡费，会员权益已恢复，会员期已相应顺延，祝您购物愉快。", 5000);

          from_type_name = -1000;

        } else {
          that.showToast("购买成功，会员卡权益已开通，祝您购物愉快。", 5000);

        }


        that.initVipData(kaiKaVipType)

        return
      }



      wx.login({
        success: res => {
          // 发送 res.code 到后台换取 openId, sessionKey, unionId, 3rd_session
          if (res.code) {
            var dataUrl = config.PayHost + "wxpaycx/wapUinifiedOrderList?" + config.Version + "&token=" + app.globalData.user.userToken + '&order_name=我的' + '&code=' + res.code + '&order_code=' + data.v_code;
            util.http(dataUrl, that.orderPayResult)
          } else {
            console.log('获取用户登录态失败！' + res.errMsg)
            wx.hideLoading()
          }
        }
      })

    } else {


      wx.hideLoading()

      that.showToast("" + data.message, 2000);

    }
  },



  orderPayResult: function (data) {


    var that = this;
    if (data.status == 1) {

      var xml = data.xml;
      wx.requestPayment({
        'timeStamp': xml.timeStamp + "",
        'nonceStr': xml.nonceStr,
        'package': xml.package,
        'signType': xml.signType,
        'paySign': xml.paySign,
        'success': function (res) { //支付成功


          // that.showToast("支付成功", 2000);
          wx.hideLoading()
          //发送购买会员成功的通知
          WxNotificationCenter.postNotificationName("memberNotificationItem1Name", "becomeMemberfinish");
          if (vipList[checkIndex].arrears_price && vipList[checkIndex].arrears_price > 0) {
            that.showToast("已补齐会员卡费，会员权益已恢复，会员期已相应顺延，祝您购物愉快。", 5000);

            from_type_name = -1000;

          } else {
            that.showToast("购买成功，会员卡权益已开通，祝您购物愉快。", 5000);

          }


          that.initVipData(kaiKaVipType)
        },
        'fail': function (res) { //支付失败

          wx.hideLoading()
          that.showToast("支付失败", 2000);

        }
      })
      that.data.isConfirm = false;
    } else {


      that.showToast('' + data.message, 2000);


    }
  },
  jiaCount: function () {
    vip_count++;


    choosePayPrice = (vipList[checkIndex].vip_price * vip_count).toFixed(2)


      //计算补差价卡和提现抵扣  （先卡后提现）
    if (0 < buchajiaPrice && buchajiaPrice < vipList[checkIndex].vip_price) {
      choosePayPrice = (vipList[checkIndex].vip_price - buchajiaPrice).toFixed(2)
      }

    if (choosePayPrice > 0 && bouns > 0) {
      choosePayPrice = (choosePayPrice - bouns).toFixed(2)
    }

    if (choosePayPrice <= 0) {
      choosePayPrice = "0.0"
    }



    this.setData({
      vip_count: vip_count,
      o_price: vipList[checkIndex].original_vip_price * vip_count + "元",
      payPrice: choosePayPrice

    })

    if (vip_count == 2) {
      this.setData({
        img_jian: "vip_couot_jian_new"

      })
    }



  },
  jianCount: function () {
    if (vip_count > 1) {
      vip_count--

      var o_price = 1000;
      switch (vipList[checkIndex].vip_type) {
        case 4:
          o_price = 399 * vip_count
          break
        case 5:
          o_price = 699* vip_count
          break
        case 6:
          o_price = 1599 * vip_count
          break
      }
      choosePayPrice = (vipList[checkIndex].vip_price * vip_count).toFixed(2)


      //计算补差价卡和提现抵扣  （先卡后提现）
      if (0 < buchajiaPrice && buchajiaPrice < vipList[checkIndex].vip_price) {
        choosePayPrice = (vipList[checkIndex].vip_price - buchajiaPrice).toFixed(2)
      }

      if (choosePayPrice > 0 && bouns > 0) {
        choosePayPrice = (choosePayPrice - bouns).toFixed(2)
      }

      if (choosePayPrice <= 0) {
        choosePayPrice = "0.0"
      }



      this.setData({
        o_price: o_price + "元",

        vip_count: vip_count,
        payPrice: choosePayPrice

      })
      if (vip_count == 1) {
        this.setData({
          img_jian: "vip_couot_jian_end_new"

        })
      }


    }
  },

  bindLeftJiantou: function () {

    checkIndex--;
    if (checkIndex < 0) {
      checkIndex = vipList.length - 1
    }
    this.setData({
      nowIdx: checkIndex,
      current: checkIndex
    })
  },
  bindRightJiantou: function () {

    checkIndex++;
    if (checkIndex > vipList.length - 1) {
      checkIndex = 0
    }
    this.setData({
      nowIdx: checkIndex,
      current: checkIndex
    })
  },

  //邀请发货（VIP）
  toInviteFriends: function () {
    loginClick = 1;
    if (app.globalData.user) {
      wx.navigateTo({
        url: '/pages/sign/InviteFriendsFreeShop/InviteFriendsFreeShop'
      })

    }


    // checkIndex--;
    // if (checkIndex < 0) {
    //   checkIndex = 5
    // }
    // this.setData({
    //   nowIdx: checkIndex,
    //   current: checkIndex
    // })



  },
  //授权弹窗
  onclick: function (e) {
    var that = this;

    wx.getUserInfo({
      //允许授权 获取用户信息
      success: function (res) {
        if (!app.globalData.user) {
          that.globalLogin();//重新登录
        }
      },
      fail: function () {

      }
    })
  },
  //自动登录
  globalLogin: function () {
    var that = this;
    util.autoLogin(loginCount, function (loginfailYiFuShow, login_discribution, login_buttontitle, newloginCount) {
      wx.hideLoading();
      loginCount = newloginCount;
      if (loginCount == 1)//登录成功
      {
        if (loginClick == 1) {
          wx.navigateTo({
            url: '/pages/sign/InviteFriendsFreeShop/InviteFriendsFreeShop'
          })
          loginClick = 0
        }
        that.initVipData(-1);
      }

    })
  },
  closeInviteFriends: function () {
    this.setData({
      showInviteFriends: false
    })
  },
  txTishiTap:function(){

    if (checkCardHave){
      this.setData({ 
        showTXtishi: true
      })
    }else{

      wx.navigateTo({
        url: '/pages/mine/addMemberCard/memberDiscription?'

          // 下单用
          + "vip_type=" + vipList[checkIndex].vip_type //会员类型
          + "&vip_count=" + vip_count //会员数量

          // 展示用
          + "&vip_name=" + vipList[checkIndex].vip_name //会员名称
          + "&vip_price=" + vipList[checkIndex].vip_price //预存299元 和 299元也可全额用于购买商品
          + "&pay_price=" + choosePayPrice //底部支付价格
          + "&punch_days=" + vipList[checkIndex].punch_days//120天
          + "&return_money=" + vipList[checkIndex].return_money //打卡返还400元
          + "&price_section=" + vipList[checkIndex].price_section //1件299元美衣
        ,
      })
    }

  },
  colseShowTXtishi: function () {
    this.setData({
      showTXtishi: false
    })
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function () {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function () {

    if (wx.getStorageSync("payvipCardSuccess")){
      this.showToast("购买成功，会员卡权益已开通，祝您购物愉快。", 5000);
      wx.setStorageSync("payvipCardSuccess", "")
      this.initVipData(kaiKaVipType);
    }
    

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function () {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function () {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function () {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function () {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function () {
    var that = this;

    var path = '';
    if (app.globalData.user != null && app.globalData.user.user_id != undefined) {
      path = '/pages/mine/addMemberCard/addMemberCard?' + "isShareFlag=true" + "&user_id=" + app.globalData.user.user_id + "&memberComefrom=mine";
    } else {
      path = '/pages/mine/addMemberCard/addMemberCard?' + "isShareFlag=true" + "&memberComefrom=mine";
    }

    return {

      title: '如何成为衣蝠会员',
      path: path,
      imageUrl: that.data.Upyun + '/small-iconImages/heboImg/share_newbuyMember.jpg',
      success: function (res) {
        // 转发成功
        this.showToast('分享成功', 2000);
      },
      fail: function (res) {
        // 转发失败
        this.showToast('分享失败', 2000);
      }
    }
  }
})