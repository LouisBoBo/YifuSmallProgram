// pages/mine/addMemberCard/addMemberCard.js
import config from '../../../config.js';
var app = getApp();
var util = require('../../../utils/util.js');
import ToastPannel from '../../../common/toastTest/toastTest.js';


var vipList = []; //会员卡列表
var userVipList = []; //已办会员卡列表

var checkIndex = 0;

var fromMine = false //个人中心点击进来的

var vip_count = 1; //要办的会员卡数量

var jump = 1; //来源  1：个人中心，2商品详情

var from_type = -1000 //type 0商品价格越界 1-6会员类型 -1会员等级不足(需求5弹框) -2会员抽奖次数用尽且有失效的会员卡(需求4提示) -3会员抽奖次数用尽且没有失效的会员卡(需求19提示)


Page({

  /**
   * 页面的初始数据
   */
  data: {
    swiperH: '', //swiper高度
    nowIdx: 0, //当前swiper索引
    vipPrice: '0.00',
    freeCount: "0",
    current: 0,
    vip_count: 1,
    Upyun: config.Upyun,
    img_jian: "vip_couot_jian_end_new"


  },

  //获取swiper高度
  getHeight: function(e) {
    var winWid = wx.getSystemInfoSync().windowWidth - 2 * 50; //获取当前屏幕的宽度
    var imgh = e.detail.height; //图片高度
    var imgw = e.detail.width; //图片宽度
    var sH = winWid * imgh / imgw - 20 + "px"
    this.setData({
      swiperH: sH //设置高度
    })
  },
  //swiper滑动事件
  swiperChange: function(e) {
    this.setData({
      nowIdx: e.detail.current
    })
    vip_count = 1
    checkIndex = e.detail.current
    this.setData({
      vipPrice:


        vipList[checkIndex].arrears_price > 0 ? vipList[checkIndex].arrears_price : vipList[checkIndex].vip_price

        ,



      //  vipList[checkIndex].vip_num ? vipList[checkIndex].vip_balance : 



      //  vipList[checkIndex].vip_price,






      payPrice: vipList[checkIndex].vip_num ?
        (vipList[checkIndex].arrears_price > 0 ? vipList[checkIndex].arrears_price : vipList[checkIndex].vip_price) : vipList[checkIndex].vip_price,

      payName: vipList[checkIndex].arrears_price > 0 ? "补足会员费" : "会员费",

      freeCount: vipList[checkIndex].free_count,
      shopPrice: vipList[checkIndex].vip_price,

      vip_count: vip_count,

      showPay: fromMine ? (
        vipList[checkIndex].vip_num ? false : true
      ) : true,

      showCount: !vipList[checkIndex].vip_num,

    })


  },

  /**
   * 生命周期函数--监听页面加载
   */
  onLoad: function(options) {
    // fromMine = options.memberComefrom == "mine";

    if (options.memberComefrom == "mine") {
      jump = 1;
    } else {
      jump = 2;

    }

    new app.ToastPannel();
    from_type = options.vip_type

    if (from_type == -1) {
      this.showToast("你的会员免费疯抢权益已使用完，去升级会员吧。", 2500);

    } else if (from_type == -2) {
      this.showToast("尊敬的衣蝠会员，您的会员费已被用于购买商品，请补足会员费。", 3000);

    } else if (from_type == -3) {
      this.showToast("尊敬的衣蝠会员，您今日的会员卡免费疯抢权益已使用完，购买新的会员卡后即可继续免费疯抢。", 4000);

    }

    this.initVipData()


  },

  initVipData: function() {

    var that = this;
    checkIndex = 0
    vipList = []
    userVipList = []
    vip_count = 1

    var requestUrl = config.Host + 'userVipType/queryByVipList?token=' + app.globalData.user.userToken + '&jump=' + jump + config.Version;
    wx.showLoading({
      title: '请稍后',
      mask: true,
    })
    util.http(requestUrl, function(data) {

      if (data.status == 1) {




        vipList = data.viplist; //会员列表
        if (data.userVipList) {
          userVipList = data.userVipList; //已开会员列表
        }


        //整合列表
        for (var vipIndex in vipList) {


          for (var userVipIndex in userVipList) {
            if (vipList[vipIndex].vip_type == userVipList[userVipIndex].vip_type) {


              //添加vipList中不存在的数据
              vipList[vipIndex].arrears_price = userVipList[userVipIndex].arrears_price;
              vipList[vipIndex].vip_balance = userVipList[userVipIndex].vip_balance;
              vipList[vipIndex].vip_num = userVipList[userVipIndex].vip_num;
              vipList[vipIndex].vip_code = userVipList[userVipIndex].vip_code;


              //添加userVipList中不存在的数据
              userVipList[userVipIndex].url = vipList[vipIndex].url
              userVipList[userVipIndex].vip_name = vipList[vipIndex].vip_name
              userVipList[userVipIndex].free_count = vipList[vipIndex].free_count
              userVipList[userVipIndex].head_url = vipList[vipIndex].head_url
              userVipList[userVipIndex].vip_price = vipList[vipIndex].vip_price

              //处理days
              userVipList[userVipIndex].days =
                userVipList[userVipIndex].days > 0 ? userVipList[userVipIndex].days + '日后可退款': ""
              


              userVipList[userVipIndex].userVipMoney =
                userVipList[userVipIndex].vip_num > 0 ? userVipList[userVipIndex].vip_num * userVipList[userVipIndex].vip_price  : ""


            }
          }
        }

        //排序，将已开通的会员的最高级别的放在前面
        //vipList中已经去掉已开卡的会员
        for (var i = 0; i < vipList.length; i++) {
          if (vipList[i].vip_code) {
            vipList.splice(i, 1);
            i--;
          }
        }
        //合并vipList和userVipList
        vipList = userVipList.concat(vipList)





        that.setData({

          vipList: vipList,
          current: 0,

          vipPrice:
            // vipList[0].vip_num ? vipList[0].vip_balance : vipList[0].vip_price,

            vipList[0].arrears_price > 0 ? vipList[0].arrears_price : vipList[0].vip_price,


          payPrice: vipList[0].vip_num ?
            (vipList[0].arrears_price > 0 ? vipList[0].arrears_price : vipList[0].vip_price) : vipList[0].vip_price,

          payName: vipList[0].arrears_price > 0 ? "补足会员费" : "会员费",

          freeCount: vipList[0].free_count,
          shopPrice: vipList[0].vip_price,
          showPay: fromMine ? (
            vipList[0].vip_num ? false : true
          ) : true,

          showCount: !vipList[0].vip_num

        })

      } else {





        that.showToast("列表：" + data.message, 5000);


      }
      wx.hideLoading()

    })
  },



  // 提交订单
  submitOrder: function(e) {

    util.httpPushFormId(e.detail.formId);

    var dataUrl = config.Host + "userVipCard/addUserVipCard?" + config.Version + "&token=" + app.globalData.user.userToken +
      '&vip_type=' + vipList[checkIndex].vip_type + "&vip_count=" + vip_count

    util.http(dataUrl, this.confirmorderResult);
    this.setData({
      dataurl: dataUrl
    });

  },
  // 提交订单结果
  confirmorderResult: function(data) {
    var that = this;
    if (data.status == 1) {
      wx.login({
        success: res => {
          // 发送 res.code 到后台换取 openId, sessionKey, unionId, 3rd_session
          if (res.code) {
            var dataUrl = config.PayHost + "wxpaycx/wapUinifiedOrderList?" + config.Version + "&token=" + app.globalData.user.userToken + '&order_name=我的' + '&code=' + res.code + '&order_code=' + data.vip_code;
            util.http(dataUrl, that.orderPayResult)
          } else {
            console.log('获取用户登录态失败！' + res.errMsg)
          }
        }
      })

    } else {




      that.showToast("提交订单：" + data.message, 5000);

    }
  },



  orderPayResult: function(data) {
    var that = this;
    if (data.status == 1) {
      var xml = data.xml;
      wx.requestPayment({
        'timeStamp': xml.timeStamp + "",
        'nonceStr': xml.nonceStr,
        'package': xml.package,
        'signType': xml.signType,
        'paySign': xml.paySign,
        'success': function(res) { //支付成功


          that.showToast("支付成功", 2000);

          that.initVipData()
        },
        'fail': function(res) { //支付失败


          that.showToast("支付失败", 2000);

        }
      })
      that.data.isConfirm = false;
    } else {


      that.showToast('支付：' + data.message, 5000);


    }
  },
  jiaCount: function() {
    vip_count++;
    this.setData({
      vip_count: vip_count,
      payPrice: (vipList[checkIndex].vip_price * vip_count).toFixed(2)

    })

    if (vip_count == 2) {
      this.setData({
        img_jian: "vip_couot_jian_new"

      })
    }



  },
  jianCount: function() {
    if (vip_count > 1) {
      vip_count--

      this.setData({
        vip_count: vip_count,
        payPrice: (vipList[checkIndex].vip_price * vip_count).toFixed(2)

      })
      if (vip_count == 1) {
        this.setData({
          img_jian: "vip_couot_jian_end_new"

        })
      }


    }
  },

  /**
   * 生命周期函数--监听页面初次渲染完成
   */
  onReady: function() {

  },

  /**
   * 生命周期函数--监听页面显示
   */
  onShow: function() {

  },

  /**
   * 生命周期函数--监听页面隐藏
   */
  onHide: function() {

  },

  /**
   * 生命周期函数--监听页面卸载
   */
  onUnload: function() {

  },

  /**
   * 页面相关事件处理函数--监听用户下拉动作
   */
  onPullDownRefresh: function() {

  },

  /**
   * 页面上拉触底事件的处理函数
   */
  onReachBottom: function() {

  },

  /**
   * 用户点击右上角分享
   */
  onShareAppMessage: function() {

  }
})